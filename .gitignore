# 바이트 컴파일 / 최적화 / DLL 파일
__pycache__/
*.py[codz]
*$py.class

# C 확장
*.so

# 배포 / 패키징
.Python
build/
develop-eggs/
dist/
downloads/
eggs/
.eggs/
lib/
lib64/
parts/
sdist/
var/
wheels/
share/python-wheels/
*.egg-info/
.installed.cfg
*.egg
MANIFEST

# PyInstaller
# 일반적으로 이 파일들은 템플릿에서 파이썬 스크립트에 의해 작성되며
# PyInstaller가 exe를 빌드하기 전에 날짜/기타 정보를 주입합니다.
*.manifest
*.spec

# 설치 로그
pip-log.txt
pip-delete-this-directory.txt

# 단위 테스트 / 커버리지 리포트
htmlcov/
.tox/
.nox/
.coverage
.coverage.*
.cache
nosetests.xml
coverage.xml
*.cover
*.py.cover
.hypothesis/
.pytest_cache/
cover/

# 번역
*.mo
*.pot

# Django 관련:
*.log
local_settings.py
db.sqlite3
db.sqlite3-journal

# Flask 관련
instance/
.webassets-cache

# Scrapy 관련
.scrapy

# Sphinx 문서
docs/_build/

# PyBuilder
.pybuilder/
target/

# Jupyter Notebook
.ipynb_checkpoints

# IPython
profile_default/
ipython_config.py

# pyenv
# 라이브러리나 패키지의 경우, 여러 환경에서 실행되도록 의도되므로
# 이 파일들을 무시할 수 있습니다. 그렇지 않으면 체크인하세요:
# .python-version

# pipenv
# pypa/pipenv#598에 따르면, Pipfile.lock을 버전 컨트롤에 포함하는 것이 권장됩니다.
# 그러나 협업 시 플랫폼별 종속성이나 크로스 플랫폼 지원이 없는 종속성이 있는 경우,
# pipenv가 작동하지 않는 종속성을 설치하거나 필요한 모든 종속성을 설치하지 않을 수 있습니다.
#Pipfile.lock

# UV
# Pipfile.lock과 유사하게, 일반적으로 uv.lock을 버전 컨트롤에 포함하는 것이 권장됩니다.
# 이는 특히 바이너리 패키지의 재현성을 보장하기 위해 권장되며,
# 라이브러리의 경우 더 일반적으로 무시됩니다.
#uv.lock

# poetry
# Pipfile.lock과 유사하게, 일반적으로 poetry.lock을 버전 컨트롤에 포함하는 것이 권장됩니다.
# 이는 특히 바이너리 패키지의 재현성을 보장하기 위해 권장되며,
# 라이브러리의 경우 더 일반적으로 무시됩니다.
#poetry.lock
#poetry.toml

# pdm
# Pipfile.lock과 유사하게, 일반적으로 pdm.lock을 버전 컨트롤에 포함하는 것이 권장됩니다.
# pdm은 pdm.toml에 프로젝트 전체 구성을 포함하되 .pdm-python은 제외할 것을 권장합니다.
#pdm.lock
#pdm.toml
.pdm-python
.pdm-build/

# pixi
# Pipfile.lock과 유사하게, 일반적으로 pixi.lock을 버전 컨트롤에 포함하는 것이 권장됩니다.
#pixi.lock
# Pixi는 venv 모듈이 .venv 디렉토리에 생성하는 것처럼 .pixi 디렉토리에 가상 환경을 생성합니다.
# 이 디렉토리는 버전 컨트롤에 포함하지 않는 것이 권장됩니다.
.pixi

# PEP 582; github.com/David-OConnor/pyflow와 github.com/pdm-project/pdm 등에서 사용
__pypackages__/

# Celery 관련
celerybeat-schedule
celerybeat.pid

# SageMath 파싱된 파일
*.sage.py

# 환경 변수
.env
.envrc
.venv
env/
venv/
ENV/
env.bak/
venv.bak/

# Spyder 프로젝트 설정
.spyderproject
.spyproject

# Rope 프로젝트 설정
.ropeproject

# mkdocs 문서
/site

# mypy
.mypy_cache/
.dmypy.json
dmypy.json

# Pyre 타입 체커
.pyre/

# pytype 정적 타입 분석기
.pytype/

# Cython 디버그 심볼
cython_debug/

# PyCharm
# JetBrains 전용 템플릿은 별도의 JetBrains.gitignore에서 관리되며
# https://github.com/github/gitignore/blob/main/Global/JetBrains.gitignore에서 찾을 수 있고
# 전역 gitignore에 추가하거나 이 파일에 병합할 수 있습니다.
# 더 강력한 옵션(권장하지 않음)으로는 다음 주석을 해제하여 전체 idea 폴더를 무시할 수 있습니다.
#.idea/

# Abstra
# Abstra는 AI 기반 프로세스 자동화 프레임워크입니다.
# 사용자 자격 증명, 로컬 상태 및 설정이 포함된 디렉토리를 무시합니다.
# 자세한 내용은 https://abstra.io/docs 에서 확인하세요
.abstra/

# Visual Studio Code
# Visual Studio Code 전용 템플릿은 별도의 VisualStudioCode.gitignore에서 관리되며
# https://github.com/github/gitignore/blob/main/Global/VisualStudioCode.gitignore에서 찾을 수 있고
# 전역 gitignore에 추가하거나 이 파일에 병합할 수 있습니다.
# 그러나 원한다면 다음 주석을 해제하여 전체 vscode 폴더를 무시할 수 있습니다
# .vscode/

# Ruff 관련:
.ruff_cache/

# PyPI 구성 파일
.pypirc

# Cursor
# Cursor는 AI 기반 코드 에디터입니다. `.cursorignore`는 자동완성 및 코드 분석과 같은
# AI 기능에서 제외할 파일/디렉토리를 지정합니다. 민감한 데이터에 권장됩니다
# https://docs.cursor.com/context/ignore-files 참조
.cursorignore
.cursorindexingignore

# Marimo
marimo/_static/
marimo/_lsp/
__marimo__/

# IntelliJ 관련
.idea/
*.iml

# =============================================================================
# 프로젝트별 추가 항목
# =============================================================================

# FastAPI 관련
*.db
*.sqlite
*.sqlite3

# 머신러닝 & AI 모델
models/
*.pkl
*.pickle
*.joblib
*.h5
*.hdf5
*.pt
*.pth
*.bin
*.safetensors
checkpoints/
wandb/
mlruns/
experiments/
logs/
tensorboard_logs/

# Hugging Face 캐시
.cache/
huggingface/
transformers_cache/

# 데이터셋
data/
datasets/
*.csv
*.json
*.jsonl
*.tsv
*.parquet
*.feather
*.xlsx
*.xls
raw_data/
processed_data/
training_data/
test_data/

# 단, 프로젝트 설정 파일은 포함
!requirements.txt
!pyproject.toml
!setup.py
!setup.cfg
!Pipfile
!poetry.lock

# MongoDB 덤프
*.bson
dumps/
backups/

# Redis 덤프
dump.rdb
*.rdb

# 웹 크롤링
downloads/
screenshots/
scraped_data/
geckodriver.log
chromedriver.log
selenium-debug.log

# 크롬/파이어폭스 드라이버
chromedriver
geckodriver
drivers/

# KoNLPy 데이터 (다운로드된 경우)
konlpy_data/

# Matplotlib/Seaborn 캐시
.matplotlib/
.seaborn-data/

# 대용량 파일 (ML 프로젝트에서 흔함)
*.zip
*.tar.gz
*.tar.bz2
*.rar
*.7z

# API 키 및 비밀 정보 (.env 외 추가)
secrets.json
config.json
api_keys.txt
credentials/

# 임시 파일
tmp/
temp/
*.tmp
*.temp

# OS 생성 파일
.DS_Store
.DS_Store?
._*
.Spotlight-V100
.Trashes
ehthumbs.db
Thumbs.db

# 프로젝트별 출력 파일
output/
results/
reports/
plots/
figures/
exports/

# 문서 빌드
docs/build/
site/

# 가상 환경 대안
conda-env/
.conda/

# 로컬 개발
local_settings.py
development.env
test.env

# 데이터베이스 마이그레이션 파일 (Alembic 사용 시)
alembic/versions/
migrations/

# 성능 프로파일링
*.prof
*.profile

# 커버리지 리포트 (추가)
.coverage.*
coverage/
htmlcov/

# JupyterLab
.jupyter/
.ipynb_checkpoints/

# Pytest
.pytest_cache/
test-results/

# MyPy
.mypy_cache/
.dmypy.json
dmypy.json